# This mini-project is based on the K-Means exercise from 'R in Action'
# Go here for the original blog post and solutions
# http://www.r-bloggers.com/k-means-clustering-from-r-in-action/

# Exercise 0: Install these packages if you don't have them already

# install.packages(c("cluster", "rattle","NbClust"))

# Now load the data and look at the first few rows
data(wine, package="rattle")
head(wine)

# Exercise 1: Remove the first column from the data and scale
# it using the scale() function

wine1 <- scale(wine[-1])

# Now we'd like to cluster the data using K-Means. 
# How do we decide how many clusters to use if you don't know that already?
# We'll try two methods.

# Method 1: A plot of the total within-groups sums of squares against the 
# number of clusters in a K-means solution can be helpful. A bend in the 
# graph can suggest the appropriate number of clusters. 

wssplot <- function(data, nc=15, seed=1234){
	              wss <- (nrow(data)-1)*sum(apply(data,2,var))
               	      for (i in 2:nc){
		        set.seed(seed)
	                wss[i] <- sum(kmeans(data, centers=i)$withinss)}
	                
		      plot(1:nc, wss, type="b", xlab="Number of Clusters",
	                        ylab="Within groups sum of squares")
	   }

wssplot(df)}

# Exercise 2:
#   * How many clusters does this method suggest?
# Based on the elbow method, it appears that this method suggests three clusters. 

#   * Why does this method work? What's the intuition behind it?
# This method creates a graph that bends, and the bend shows where the difference between each subsequent set gets smaller and smaller. 
# Choosing the number of clusters at the bend gives you the optimum number of clusters while maintaining enough distinction between observations. 

#   * Look at the code for wssplot() and figure out how it works
# It calculates the within-cluster sum of square, comparing the distance between centers. 

# Method 2: Use the NbClust library, which runs many experiments
# and gives a distribution of potential number of clusters.

library(NbClust)
set.seed(1234)
nc <- NbClust(df, min.nc=2, max.nc=15, method="kmeans")
barplot(table(nc$Best.n[1,]),
	          xlab="Number of Clusters", ylab="Number of Criteria",
		            main="Number of Clusters Chosen by 26 Criteria")


# Exercise 3: How many clusters does this method suggest?
# This method also recommends three (3) clusters. 

# Exercise 4: Once you've picked the number of clusters, run k-means 
# using this number of clusters. Output the result of calling kmeans()
# into a variable fit.km

# fit.km <- kmeans( ... )
fit.km <- kmeans(wine1, 3, nstart=25)
fit.km$size
[1] 51 65 62

fit.km$centers

# Now we want to evaluate how well this clustering does.

# Exercise 5: using the table() function, show how the clusters in fit.km$clusters
# compares to the actual wine types in wine$Type. Would you consider this a good
# clustering?
ct.km <- table(wine$Type, fit.km$cluster)
> ct.km

1  2  3
1  0  0 59
2  3 65  3
3 48  0  0

# This shows a very strong, clean alignment with the original three clusters in the Type column with our newly created clusters. All but six observations are in alignment.
# Yes, this is a good clustering. 

# Exercise 6:
# * Visualize these clusters using  function clusplot() from the cluster library
# * Would you consider this a good clustering?
# This does look like a good clustering. There is some overlap between two of the clusters, but very little. The third cluster (I assume #2, based on the earlier table) is entirely discrete. 

clus.km <- pam(wine1, 3)
clusplot(clus.km)
#clusplot( ... )
